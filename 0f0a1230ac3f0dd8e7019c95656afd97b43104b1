{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0b86d73b_652e5792",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-01-12T21:17:27Z",
      "side": 1,
      "message": "In my personal experience, JGit GC is a lot more suitable for Gerrit than Git GC. Can you explain the rationale behind this?",
      "range": {
        "startLine": 9,
        "startChar": 29,
        "endLine": 9,
        "endChar": 61
      },
      "revId": "0f0a1230ac3f0dd8e7019c95656afd97b43104b1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3c87ae0_68c5197b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1127770
      },
      "writtenOn": "2023-01-13T11:13:02Z",
      "side": 1,
      "message": "There are 2 main reasons:\n1. lots of admins doesn\u0027t use gc-conductor/gc-executors and they are preferring to run native git gc run by crone job.\n2. Performance. \n\nMore details:\nAfter moving from 2.14-\u003e 3.4 witch has a notedb we spotted significant gc performance degradation for notedb and few biggest repos. This also slow down upgrade process significantly. The solution was to disable gc during upgrade and run native gc from hand between upgrade steps. We also decide that for all-users and 3 other biggest repos we will not run jgit gc but use native one instead. We want to keep gc-conductor/ gc-executor for monitoring and loging so we design this solution and we already using this on 1 of prod instances and big UAT environment.\nRegarding performance difference on all-users I don remember exact numbers but scale should be more less ok JGIT GC 2.14 (up to 11h) JGIT GC 3.4 (up to 48h) native GC on 3.4 (40minutes).\nDuring brief investigation i spotted that native git gc uses more cores during all all steps during gc.",
      "parentUuid": "0b86d73b_652e5792",
      "range": {
        "startLine": 9,
        "startChar": 29,
        "endLine": 9,
        "endChar": 61
      },
      "revId": "0f0a1230ac3f0dd8e7019c95656afd97b43104b1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b79a9f2_41e081a4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-01-15T09:35:44Z",
      "side": 1,
      "message": "\u003e There are 2 main reasons:\n\u003e 1. lots of admins doesn\u0027t use gc-conductor/gc-executors and they are preferring to run native git gc run by crone job.\n\nI see but can you investigate on why they do that?\n\n\u003e 2. Performance. \n\nCan you clarify? In my experience, the performance of JGit and C-Git are comparable when you are performing Git GCs. The gaps have been already filled up, many of the fixes we have provided have also been merged.\n\n\u003e More details:\n\u003e After moving from 2.14-\u003e 3.4 witch has a notedb we spotted significant gc performance degradation for notedb and few biggest repos.\n\nCorrect, that is expected and also is a direct consequence of using C-Git GC. Gerrit has a lot more commits and refs associated with the code-review activity and C-Git is just unaware of all of them. \n\nJGit has a \"special\" treatment of what is coming from Gerrit and makes sure that the code-review related activity is organised in a separate packfile, together with all the other \u0027refs/changes/*\u0027.\n\n\u003e This also slow down upgrade process significantly. The solution was to disable gc during upgrade and run native gc from hand between upgrade steps.\n\nI see, are you referring to the JGit GC *during* or *after* the upgrade? (in the sentence above you said \u0027after moving\u0027.\n\n\u003e We also decide that for all-users and 3 other biggest repos we will not run jgit gc but use native one instead.\n\nHave you tried my fixes on stable-5.13? [1]\nBear in mind that the bitmap generated by C-Git is largely inefficient compared to the one generated by JGit. I have done specific benchmarks on large mono-repos and the JGit\u0027s one is over 200% faster to use at runtime and takes around the same time to produce it.\n\n\u003e We want to keep gc-conductor/ gc-executor for monitoring and loging so we design this solution and we already using this on 1 of prod instances and big UAT environment.\n\nThat makes sense, however, I would deep dive into the performance issues you have with JGit GC. Choosing to use a less performant C-Git GC isn\u0027t an effective solution from my experience.\n\n\u003e Regarding performance difference on all-users I don remember exact numbers but scale should be more less ok JGIT GC 2.14 (up to 11h) JGIT GC 3.4 (up to 48h) native GC on 3.4 (40minutes).\n\nWell, that is massive. Have you checked with my fixes at [1]?\n\n\u003e During brief investigation i spotted that native git gc uses more cores during all all steps during gc.\n\nHave you defined the pack threads in JGit? [2] Could it be that the number of CPUs returned by the JVM isn\u0027t working for some reasons for you? I do see the CPUs fully utilised when the JGit GC is running on stable-5.13.\n\nWhich branch of JGit are you using for GC?\n\n[1] https://git.eclipse.org/r/q/status:open+branch:stable-5.13\n[2] https://github.com/GerritCodeReview/jgit/blob/master/Documentation/config-options.md",
      "parentUuid": "d3c87ae0_68c5197b",
      "range": {
        "startLine": 9,
        "startChar": 29,
        "endLine": 9,
        "endChar": 61
      },
      "revId": "0f0a1230ac3f0dd8e7019c95656afd97b43104b1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93250864_9070888e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2023-01-23T16:54:54Z",
      "side": 1,
      "message": "I implemented another performance improvement for jgit gc, see https://git.eclipse.org/r/c/jgit/jgit/+/199468",
      "parentUuid": "8b79a9f2_41e081a4",
      "range": {
        "startLine": 9,
        "startChar": 29,
        "endLine": 9,
        "endChar": 61
      },
      "revId": "0f0a1230ac3f0dd8e7019c95656afd97b43104b1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2361f3ee_905816d0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1083195
      },
      "writtenOn": "2023-02-14T20:01:48Z",
      "side": 1,
      "message": "I tested this new version of jgit gc it still takes around 600 min to do full gc of All-Users",
      "parentUuid": "93250864_9070888e",
      "range": {
        "startLine": 9,
        "startChar": 29,
        "endLine": 9,
        "endChar": 61
      },
      "revId": "0f0a1230ac3f0dd8e7019c95656afd97b43104b1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36e94676_66a1a123",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-02-14T20:20:44Z",
      "side": 1,
      "message": "\u003e I tested this new version of jgit gc it still takes around 600 min to do full gc of All-Users\n\n10h for All-Users?? I\u0027d be happy to help in identifying and removing the bottlenecks.",
      "parentUuid": "2361f3ee_905816d0",
      "range": {
        "startLine": 9,
        "startChar": 29,
        "endLine": 9,
        "endChar": 61
      },
      "revId": "0f0a1230ac3f0dd8e7019c95656afd97b43104b1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "675e7909_fc37b8ba",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2023-02-14T22:34:56Z",
      "side": 1,
      "message": "- Can you share stats (use e.g. git-sizer) for this repo ?\n- Which git configuration did you use for running jgit gc ?\n- Which Java configuration did you use for running jgit gc ?",
      "parentUuid": "36e94676_66a1a123",
      "range": {
        "startLine": 9,
        "startChar": 29,
        "endLine": 9,
        "endChar": 61
      },
      "revId": "0f0a1230ac3f0dd8e7019c95656afd97b43104b1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f56d3e3_3cb95d8d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1083195
      },
      "writtenOn": "2023-03-09T23:37:22Z",
      "side": 1,
      "message": "We are performing another update, I will share the git-sizer date once that is done. \nas for java configuration, I am not sure how to check it, but we are using openjdk11. I tried with both aggressive and not aggressive, aggressive took longer than 10h so I stopped it. I ran gc from gerrit and from gc-conductor while not having any traffic. GC-conductor uses the same jgit version as master. Is it better to create a discussion for us to track and work on this?",
      "parentUuid": "675e7909_fc37b8ba",
      "range": {
        "startLine": 9,
        "startChar": 29,
        "endLine": 9,
        "endChar": 61
      },
      "revId": "0f0a1230ac3f0dd8e7019c95656afd97b43104b1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c6d604a_dd922609",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2023-03-10T00:50:58Z",
      "side": 1,
      "message": "- For jgit gc ensure that Java heap size is large enough for large repos. \n- Configure Java GC to use ParallelGC which has higher throughput.\n\n- Configure pack.threads\n- Increasing `core.packedGitLimit` may help to reduce IO\n- `core.packedGitUseStrongRefs\u003dtrue` prevents that the JVM flushes the JGit cache when heap usage comes close to max heap size\n- `core.sha1Implementation\u003djdkNative` uses native SHA1 implementation from JDK\n- Don\u0027t use aggressive gc without a reason, you may end up with less optimal delta chains",
      "parentUuid": "7f56d3e3_3cb95d8d",
      "range": {
        "startLine": 9,
        "startChar": 29,
        "endLine": 9,
        "endChar": 61
      },
      "revId": "0f0a1230ac3f0dd8e7019c95656afd97b43104b1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}